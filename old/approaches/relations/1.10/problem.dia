node 'A method to print/ask for `(plus "1" "1")`' '-144.0' '128.5' 'It would be also nice to auto-prove `(plus "1"  "1") != "1"` with that logic.\nThats possible by involving constants.'
node 'The + Operator' '-476.5' '32.5' 'An Operator to concat constants.\n\nWell sir, somebody needs to rebuild SRL then..'
node 'Printing format for complex cells' '-257.5' '-40.5' 'An optional Definition for complex cells to explain, how they shall print itself.'
node 'Cells are printable, when they only contain constants.' '-403.5' '-197.5' 'You could then change `plus` to `"plus"`\nAnd maybe `minus` to `"minus"`.\n\nThe constant-equals-definition (3) shall be impactless for complex constants,\nto make this work.'
node 'Allow Different Printings of the same Thing' '-204.5' '32.5' 'Thats kinda bad, but maybe still the best.'
node 'Decide which Complex Cells can be used in the Solver' '45.5' '-201.5' 'Solver-Commands to allow special cells in the printed result.\nYou could also use `<constants>` as cell to decide whether constants are allowed.\n'
node 'Solver-command `print <cell>[ with <complex cells>]`' '-212.5' '-289.5' 'eg. `print (plus wow "1") with plus, minus`\n\nIf combined with "Solver-command allow/disallow"\na <allowed>-cell would be nice.'
node 'Solver-command `allow/disallow <complex cells>`' '211.5' '-275.5' 'eg. `allow equals, plus, minus`\n\nA Command `allowed`\nto print what cells are allowed would be nice here.'
node 'Special Cells can be printed as they are in the db.' '-174.5' '-131.5' ''
node 'A method to print/ask for `infinity`' '242.5' '126.5' 'Infinity is no constant.\nIt explains itself by being greater-or-equal to every other number.\n\nSo you could represent it by:\n`for x in numbers: x <= infinity`'
node '`DST`' '82.5' '252.5' ''
node 'Maybe just ask around it?' '506.5' '50.5' 'Just ask whether its an `int`?\nIf yes, ask whether its greater than `1`\nIf yes, ask whether its less than `1000000`.\nEtc.\n\nThis process could be done by the user\nor it could be implemented into the solver.\n\nWith this method you just need to convert stuff to constants.'
node 'Rule-Evaluation-System' '47.5' '74.5' 'A system, probabbly implemented in the solver,\nwhich returns how important a rule is,\nto learn about the argument.\n\n-> The most important rules are printed.\n\nHard to implement into the solver, so that it is fast.'
node 'Short Rules' '211.5' '-17.5' 'Short rules containing the argument\nand maybe some specified cells like `equals`\nare the most important.'
node 'Rules Order' '81.5' '10.5' 'Regex-like rules, which are ordered from important to umimportant:\nRule 1: `equals <argument> <constant>.`\nRule 2: `equals <argument> <non-constant>.`\nRule 3: `<anything> <argument>.`\nRule 4 ...'
connection '2' '4' '-266.5' '13.0' ''
connection '6' '5' '-36.5' '-221.0' ''
connection '8' '2' '-223.5' '-60.0' ''
connection '7' '5' '86.5' '-221.0' ''
connection '3' '8' '-191.5' '-151.0' ''
connection '5' '8' '-148.5' '-151.0' ''
connection '1' '0' '-286.0' '129.0' ''
connection '0,9' '10' '84.5' '233.0' ''
connection '12' '0' '-2.0' '109.0' ''
connection '12' '9' '124.5' '107.0' ''
connection '11' '9' '246.5' '107.0' ''
connection '4' '0' '-178.0' '109.0' ''
connection '8' '12' '45.5' '55.0' ''
connection '14' '12' '84.5' '55.0' ''
connection '13' '12' '129.5' '55.0' ''
