node 'A method to print/ask for `(plus "1" "1")`' '-74.0' '131.5' 'It would be also nice to auto-prove `(plus "1"  "1") != "1"` with that logic.\nThats possible by involving constants.'
node 'The + Operator' '-476.5' '32.5' 'An Operator to concat constants.\n\nWell sir, somebody needs to rebuild SRL then..'
node 'Printing format for complex cells' '-164.5' '-61.5' 'An optional Definition for complex cells to explain, how they shall print itself.'
node 'Cells are printable, when they only contain constants.' '-403.5' '-197.5' 'You could then change `plus` to `"plus"`\nAnd maybe `minus` to `"minus"`.\n\nThe constant-equals-definition (3) shall be impactless for complex constants,\nto make this work.'
node 'Allow Different Printings of the same Thing' '-145.5' '14.5' 'Thats kinda bad, but maybe still the best.'
node 'Decide which Complex Cells can be used in the Solver' '45.5' '-201.5' 'Solver-Commands to allow special cells in the printed result.\nYou could also use `<constants>` as cell to decide whether constants are allowed.\n'
node 'Solver-command `print <cell>[ with <complex cells>]`' '-212.5' '-289.5' 'eg. `print (plus wow "1") with plus, minus`\n\nIf combined with "Solver-command allow/disallow"\na <allowed>-cell would be nice.'
node 'Solver-command `allow/disallow <complex cells>`' '211.5' '-275.5' 'eg. `allow equals, plus, minus`\n\nA Command `allowed`\nto print what cells are allowed would be nice here.'
node 'Special Cells can be printed as they are in the db.' '-174.5' '-131.5' ''
node 'A method to print/ask for `infinity`' '230.5' '133.5' 'Infinity is no constant.\nIt explains itself by being greater-or-equal to every other number.\n\nSo you could represent it by:\n`for x in numbers: x <= infinity`'
node '`DST`' '82.5' '252.5' ''
node 'Print: Most important Rules' '316.5' '25.5' 'To Print eg. infinity the key rules of the object have to be printed.\nWhat are these key-rules?\nRule 1: `(equals <thingy> <constant-of-thingy>).`'
node 'Maybe just ask around it?' '107.5' '12.5' 'Just ask whether its an `int`?\nIf yes, ask whether its greater than `1`\nIf yes, ask whether its less than `1000000`.\nEtc.\n\nThis process could be done by the user\nor it could be implemented into the solver.\n\nWith this method you just need to convert stuff to constants.'
connection '4' '0' '-146.0' '112.0' ''
connection '2' '4' '-163.5' '-5.0' ''
connection '6' '5' '-36.5' '-221.0' ''
connection '8' '2' '-130.5' '-81.0' ''
connection '7' '5' '86.5' '-221.0' ''
connection '3' '8' '-191.5' '-151.0' ''
connection '5' '8' '-148.5' '-151.0' ''
connection '1' '0' '-216.0' '132.0' ''
connection '0,9' '10' '84.5' '233.0' ''
connection '11' '9' '263.5' '114.0' ''
connection '12' '9' '171.5' '114.0' ''
