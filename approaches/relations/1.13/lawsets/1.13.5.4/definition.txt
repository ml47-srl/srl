# SRL 1.13.5.4

### Anmerkungen
Alles, was in `[[...]]`-Klammern steht ist eine generische Angabe<br />
und gilt f&uuml;r alles, was man dort einsetzen kann.<br />
Dies ist kein Bestandteil von SRL sondern lediglich ein Erkl&auml;rsyntax.

### Definitionen
1. Definition Wrapper
   Ein Wrapper W:(Cell, Cell) ist eine Funktion.
   Alle Wrapper bilden sich folgenderma&szlig;en rekursiv:
	   W(c) = c, oder
	   W(c) = { [[simple]] X(c) }, oder
	   W(c) = (=> [[cell]] X(c)),
   wobei X(c) auch ein Wrapper ist.

   Elementare Wrapper sind:
   W(c) = { [[simple]] c } und (Elementarer Wrapper vom Typ Scope)
   W(c) = (=> [[cell]] x) (Elementarer Wrapper vom Typ Implikation)

2. Definition bool
   Die folgenden Zellen sind Bool-zellen:
   - rules
   - equals-cells
   - implies-cells
   - scope-cells
   - 'true'
   - 'false'
   - => __this__ __this__ (positional)
   - { a __this__ } (positional)

### Gesetze
1. Equals-replace
   Wenn es eine Regel R1 = W(a) gibt, wobei W der Wrapper um a ist,
   darf ich, falls es eine Regel R2 = "W(= b c)" gibt, b und c in R1's a umtauschen.

2. core-rules:
   Jede Datenbank beginnt mit folgenden Regeln:
   - "`{a (= <a> <a>)}.`"
   - "`{a (=> <a> 'true').`"

3. Es gilt f&uuml;r alle nicht string-gleichen Konstanten A und B,
   dass man "(= [[A]] [[B]])" mit 'false' austauschen kann.

4. Jede Bool-zelle b kann man mit "`= 'true' [[b]].`" austauschen.
   Man kann dann auch aus "`= 'true' [[b]]`" ein "`[[b]]`" machen.
   Beide Umwandlungen gehen auch für positional bools.

5. Scope-Einsetzung
   Man kann in ein Scope S = { a p } aus der Regel R etwas einsetzen, wenn es einen Wrapper W gibt, mit W(S) = R.
   Beim Einsetzen, wird aus { a p } ein (= 'true' p),
   wobei alle Vorkommnisse von <a> mit einer beliebigen, aber festen Ersatz-zelle ersetzt werden.
   Diese Ersatz-zelle darf keine Vars enthalten, dessen Scopes nach der Einsetzung nicht umliegen.

6. Scope-Umbenennung
   Man kann die ID und alle Vars einer Scope-zelle umbenennen,
   falls dadurch nicht zwei verschachtelte Scope-zellen mit gleicher ID auftreten

7. Implikations-ableitung
   Wenn
	"`=> [[bool]] [[cell]].`"
   und
	"`=> (= 'false' [[bool]]) [[cell]].`", dann gilt:
   "`[[cell]].`"
   [[bool]] muss dabei eine bool-zelle sein.

8. X1 und X2 seien Elementare Wrapper,
   Man kann X1(X2(x)) mit X2(X1(x)) austauschen, wenn
   - X1 und X2 den gleichen Typ haben (Scope oder Implikation)
   - X1 eine Implikation ist, X2 ein Scope ist
     und die linke Implikationsseite von X1 kein Scope mit der gleichen ID, wie X2's Scope enthält
   - X1 ein Scope ist, X2 eine Implikation ist
     und die linke Implikationsseite von X1 kein Var von der Scope von X1 enthält

9. Implikations-effekt
   Seien W1 und W2 Wrapper, X ein elementarer Implikations-wrapper
   und die linke Implikationsseite von X ist (= [[b]] [[c]]).
   In jeder Regel R = W1(X(W2(a))) kann man in a, durch die linke Implikationsseite b und c vertauschen.

### Allgemeine Informationen
1. 
	- Vars/Constants sind keine simplen Zellen<br />
	- Scopes sind auch keine komplexen Zellen<br />
	- Die ID einer Scope-zelle ist ihr erstes Argument<br />
	- Die ID einer Scope-zelle dient zur Zuordnung der Vars zur Scope-zelle<br />

2. Wenn
	- die Regel "`'false'.`" gilt,<br />
   	- eine Var-zelle nicht in eine Scope-zelle gleicher ID eingebettet ist
   	- Zwei Scope-zellen, welche ineinander liegen, die gleiche ID haben oder
	- eine Zelle keiner der Zellenform entspricht (siehe Zellendifferenzierung)
   ist die Datenbank paradox.
   Alle Informationen, die man aus der Datenbank gewonnen hat sind ung&uuml;ltig.

### Zellendifferenzierung
- Zellen sind eins von den folgenden: scope, complex, simple, constant, var<br />
- Scope = "`{[[simple]] [[cell]]}`"<br />
- complex = "`([[cell]] [[cell]] ...)`"<br />
- simple = Zeichenkette nur aus Buchstaben von A-Z, a-z, 0-9 und _
- constant = "`'[[simple]]'`"<br />
- var = "`<[[simple]]>`"<br />
