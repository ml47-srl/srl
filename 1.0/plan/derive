# derive

# "a -> b" means: a could be substituded by b
# "a <-> b" means: a -> b & b -> a
# "a: b" means: if a is true b is true too

equals(a b): a <-> b
equals(a b) <-> equals(b a)
equals(true a) -> a

implies(true a): a -> true

not(unknown) <-> unknown
not(true) <-> false
not(false) <-> true

and(a b) -> a
and(a b) -> b
and(a b) <-> and(b a)

or(a b): not(a) -> b
or(a b) <-> or(b a)

xor(a b): a -> not(b)
xor(a b): not(a) -> b
xor(a b) <-> xor(b a)

# with wildcards

...
