# count

OLD
{
	# count <pattern containing var>
		not capable of recursion between counts:
			count (count (= var var)) # what var is for what count?

		# So we need an identifier:
	# count (var 'x') <pattern containing (var 'x')>:
		# convert pattern to real expression does not work:
			# (thing_with_many_args a b c d e f g (var 'x') h i j k) needs to be converted to
			# (thing_with_many_args a b c d e f g ##the_thing_you_test## h i j k).
			# which would need conversion rules for every amount of args you'd give.
			# (infinity)
			# so this does not work..

		# You could create an operator + so that: (a b c) is the same as (a (+ b c)), and (a b c d) is the same as (a (+ b (+ c d))), this would crop everything down to 1-3 args, which is a finite amount, which is .. better. ^^

		# The + operator is a problem:
		# = (+ x y) (+ x y)
		# = x (+ y x y), which is bad.

	# {0 (= (contains tmp_set 0) <pattern_with_0>)
		# and then (size tmp_set) represents the count

		# We need a set definition, which is able to calculate its size.
		# This may work by converting the set to an unredundant list, and get the size from that list.
}

# Deklarierbarkeit von Mengen:
{0 (= 'false' {1 (= 'false' {2 (= (contains 1 2) 0)})})}. # 0 = condition, 1 = set, 2 = element
# ==> Zu jeder Bedingung existiert eine Menge, die genau die Elemente enthält, welche die Bedingung erfüllen.
# Erst die Bedingung in 0 einsetzen, dann per exlaw das set erstellen. GG.
# Beispiel:
	{0 (= 'false' {1 (= 'false' {2 (= (contains 1 2) 0)})})}.
	= 'false' {1 (= 'false' {2 (= (contains 1 2) (= 2 'thingy')})}.
	{2 (= (contains my_set 2) (= 2 'thingy'))}.

# Und damit kann man das Count-problem auf ein Mengenmächtigkeits-problem zurückführen.

# Erkennung von "size=1"-mengen:
{0 "set" (= (= 'false' {1 "single elem" (= 'false' {2 "all elem" (= (= 2 1) (contains 0 2))})}) (= (size 0) _one_))}.

# Zerlegung von Mengen in size=1 Mengen:
#	A vereinigt B = C & A und B sind disjunkt => |A| + |B| = |C|.
# oder
#	A vereinigt B = C => |A| + |B| = |C| + |A geschnitten B|

# Und size=0-mengen:
{0 "set" (= {1 "elem" (= 'false' (contains 0 1))} (= (size 0) _zero_))}.
